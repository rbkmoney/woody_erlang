%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(woody_test_thrift).

-include("woody_test_thrift.hrl").

-export([enums/0]).
-export([typedefs/0]).
-export([structs/0]).
-export([services/0]).
-export([typedef_info/1]).
-export([enum_info/1]).
-export([struct_info/1]).
-export([functions/1]).
-export([function_info/3]).

-export_type([typedef_name/0]).
-export_type([enum_name/0]).
-export_type([struct_name/0]).
-export_type([exception_name/0]).
-export_type([service_name/0]).
-export_type([function_name/0]).


-export_type([
    'direction'/0
]).
-export_type([
    'weapon'/0,
    'powerup'/0
]).
-export_type([
    'weapon_failure'/0,
    'powerup_failure'/0
]).

%% typedefs
-type typedef_name() :: none().


%% enums
-type enum_name() ::
    'direction'.

%% enum 'direction'
-type 'direction'() ::
    next |
    prev.

%% structs, unions and exceptions
-type struct_name() ::
    'weapon' |
    'powerup'.

-type exception_name() ::
    'weapon_failure' |
    'powerup_failure'.

%% struct 'weapon'
-type 'weapon'() :: #'weapon'{}.

%% struct 'powerup'
-type 'powerup'() :: #'powerup'{}.

%% exception 'weapon_failure'
-type 'weapon_failure'() :: #'weapon_failure'{}.

%% exception 'powerup_failure'
-type 'powerup_failure'() :: #'powerup_failure'{}.

-type service_name() ::
    'weapons' |
    'powerups'.

-type function_name() ::
    'switch_weapon'|
    'get_weapon'|
    'get_powerup'|
    'like_powerup'.

-type struct_flavour() :: struct | exception | union.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional | undefined.

-type type_ref(Type) :: {?MODULE, Type}.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
    {enum, type_ref(enum_name())} |
    {struct, struct_flavour(), type_ref(struct_name() | exception_name())} |
    {list, field_type()} |
    {set, field_type()} |
    {map, field_type(), field_type()}.

-type struct_field_info() ::
    {field_num(), field_req(), field_type(), field_name(), any()}.
-type struct_info() ::
    {struct, struct_flavour(), [struct_field_info()]}.

-type enum_choice() ::
    'direction'().

-type enum_field_info() ::
    {enum_choice(), integer()}.
-type enum_info() ::
    {enum, [enum_field_info()]}.

-spec typedefs() -> [typedef_name()].

typedefs() ->
    [].

-spec enums() -> [enum_name()].

enums() ->
    [
        'direction'
    ].

-spec structs() -> [struct_name()].

structs() ->
    [
        'weapon',
        'powerup'
    ].

-spec services() -> [service_name()].

services() ->
    [
        'weapons',
        'powerups'
    ].

-spec typedef_info(typedef_name()) -> field_type() | no_return().

typedef_info(_) -> erlang:error(badarg).

-spec enum_info(enum_name()) -> enum_info() | no_return().

enum_info('direction') ->
    {enum, [
        {next, 1},
        {prev, 0}
    ]};

enum_info(_) -> erlang:error(badarg).

-spec struct_info(struct_name()) -> struct_info() | no_return().

struct_info('weapon') ->
    {struct, struct, [
        {1, required, string, 'name', undefined},
        {2, required, i16, 'slot_pos', undefined},
        {3, optional, i16, 'ammo', undefined}
    ]};

struct_info('powerup') ->
    {struct, struct, [
        {1, required, string, 'name', undefined},
        {2, optional, i16, 'level', undefined},
        {3, optional, i16, 'time_left', undefined}
    ]};

struct_info('weapon_failure') ->
    {struct, exception, [
        {1, required, string, 'exception_name', <<"weapon failure">>},
        {2, required, string, 'code', undefined},
        {3, optional, string, 'reason', undefined}
    ]};

struct_info('powerup_failure') ->
    {struct, exception, [
        {1, required, string, 'exception_name', <<"powerup failure">>},
        {2, required, string, 'code', undefined},
        {3, optional, string, 'reason', undefined}
    ]};

struct_info(_) -> erlang:error(badarg).

-spec functions(service_name()) -> [function_name()] | no_return().

functions('weapons') ->
    [
        'switch_weapon',
        'get_weapon'
    ];

functions('powerups') ->
    [
        'get_powerup',
        'like_powerup'
    ];

functions(_) -> error(badarg).

-spec function_info(service_name(), function_name(), params_type | reply_type | exceptions) ->
    struct_info() | no_return().

function_info('weapons', 'switch_weapon', params_type) ->
    {struct, struct, [
        {1, undefined, {struct, struct, {woody_test_thrift, 'weapon'}}, 'current_weapon', #'weapon'{}},
        {2, undefined, {enum, {woody_test_thrift, 'direction'}}, 'direction', undefined},
        {3, undefined, i16, 'shift', undefined},
        {4, undefined, string, 'data', undefined}
    ]};
function_info('weapons', 'switch_weapon', reply_type) ->
    {struct, struct, {woody_test_thrift, 'weapon'}};
function_info('weapons', 'switch_weapon', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {woody_test_thrift, 'weapon_failure'}}, 'error', #'weapon_failure'{}}
    ]};
function_info('weapons', 'get_weapon', params_type) ->
    {struct, struct, [
        {1, undefined, string, 'name', undefined},
        {2, undefined, string, 'data', undefined}
    ]};
function_info('weapons', 'get_weapon', reply_type) ->
    {struct, struct, {woody_test_thrift, 'weapon'}};
function_info('weapons', 'get_weapon', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {woody_test_thrift, 'weapon_failure'}}, 'error', #'weapon_failure'{}}
    ]};

function_info('powerups', 'get_powerup', params_type) ->
    {struct, struct, [
        {1, undefined, string, 'name', undefined},
        {2, undefined, string, 'data', undefined}
    ]};
function_info('powerups', 'get_powerup', reply_type) ->
    {struct, struct, {woody_test_thrift, 'powerup'}};
function_info('powerups', 'get_powerup', exceptions) ->
    {struct, struct, [
        {1, undefined, {struct, exception, {woody_test_thrift, 'powerup_failure'}}, 'error', #'powerup_failure'{}}
    ]};
function_info('powerups', 'like_powerup', params_type) ->
    {struct, struct, [
        {1, undefined, string, 'name', undefined},
        {2, undefined, string, 'data', undefined}
    ]};
function_info('powerups', 'like_powerup', reply_type) ->
    oneway_void;
function_info('powerups', 'like_powerup', exceptions) ->
    {struct, struct, []};

function_info(_Service, _Function, _InfoType) -> erlang:error(badarg).

