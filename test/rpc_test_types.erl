%%
%% Autogenerated by Thrift Compiler (1.0.0-dev)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(rpc_test_types).


-include("rpc_test_types.hrl").

-type type_ref() :: {module(), atom()}.
-type field_num() :: pos_integer().
-type field_name() :: atom().
-type field_req() :: required | optional.
-type field_type() ::
    bool | byte | i16 | i32 | i64 | string | double |
    {enum, type_ref()} |
    {struct, type_ref()} |
    {list, field_type()} |
    {set, field_type()} |
    {map, field_type(), field_type()}.

-type struct_field_info() :: {field_num(), field_req(), field_type(), field_name(), any()}.
-type enum_field_info() :: {atom(), integer()}.

-export([enum_names/0]).
-export([struct_names/0]).
-export([enum_info/1]).
-export([struct_info/1]).

-spec struct_names() -> [atom()].

struct_names() ->
    [
        'weapon', 
        'powerup', 
        'weapon_failure', 
        'powerup_failure'
    ].

-spec enum_names() -> [atom()].

enum_names() ->
    [
        'direction'
    ].

-spec struct_info(atom()) -> {struct, [struct_field_info()]}.

struct_info('weapon') ->
    {struct, [
        {1, required, string, 'name', undefined},
        {2, required, i16, 'slot_pos', undefined},
        {3, optional, i16, 'ammo', undefined}
    ]};

struct_info('powerup') ->
    {struct, [
        {1, required, string, 'name', undefined},
        {2, optional, i16, 'level', undefined},
        {3, optional, i16, 'time_left', undefined}
    ]};

struct_info('weapon_failure') ->
    {struct, [
        {1, required, string, 'exception_name', <<"weapon failure">>},
        {2, required, string, 'code', undefined},
        {3, optional, string, 'reason', undefined}
    ]};

struct_info('powerup_failure') ->
    {struct, [
        {1, required, string, 'exception_name', <<"powerup failure">>},
        {2, required, string, 'code', undefined},
        {3, optional, string, 'reason', undefined}
    ]};

struct_info(_) -> erlang:error(badarg).

-spec enum_info(atom()) -> {enum, [enum_field_info()]}.

enum_info('direction') ->
    {enum, [
        {next, 1},
        {prev, 0}
    ]};

enum_info(_) -> erlang:error(badarg).

