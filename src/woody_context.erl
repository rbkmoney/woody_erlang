%%% @doc Client API
%%% @end

-module(woody_context).

-include("woody_defs.hrl").

%% API
-export([new/2, new/3]).

-export([annotate/2]).
-export([annotation/1, annotation/2]).

-export([get_rpc_id/1, get_child_rpc_id/1]).
-export([get_rpc_id/2, get_child_rpc_id/2]).

-export([set_ev_handler/2]).
-export([get_ev_handler/1]).

-export([make_rpc_id/3]).
-export([new_id/1]).
-export([unique_int/0]).

%% For intenal use in woody_erlang
-export([new_incoming/2]).
-export([next/1]).

%% Types
-export_type([ctx/0]).
-export_type([annotation/0]).
-export_type([annot_name/0]).

-type ctx() :: #{  %% The elements are madatory if not specified otherwise
    root_rpc      => boolean(),
    seq           => non_neg_integer(),
    rpc_id        => woody_t:rpc_id(),
    child_rpc_id  => woody_t:rpc_id(), %% optional
    annotation    => annotation(),     %% optional
    event_handler => woody_t:handler()
}.
-type annotation() :: #{binary() => binary()}.
-type annot_name() :: binary().

-define(ROOT_REQ_PARENT_ID, <<"undefined">>).
-define(DEFAULT_ID_SUFFIX,  <<"">>).


%%
%% API
%%
-spec new(woody_t:req_id() | woody_t:rpc_id() | undefined, woody_t:handler()) ->
    ctx().
new(Id, EvHandler) ->
    new(Id, EvHandler, undefined).

-spec new(woody_t:req_id() | woody_t:rpc_id() | undefined, woody_t:handler(), annotation() | undefined) ->
    ctx().
new(RpcId = #{parent_id := ?ROOT_REQ_PARENT_ID}, EvHandler, Annot) ->
    make_ctx(true, RpcId, EvHandler, Annot);
new(RpcId = #{}, EvHandler, Annot) ->
    make_ctx(false, RpcId, EvHandler, Annot);
new(undefined, EvHandler, Annot) ->
    %% This is going to be a root RPC with autogenerated RpcId
    RootId = new_id(?DEFAULT_ID_SUFFIX),
    make_ctx(
        true,
        make_rpc_id(?ROOT_REQ_PARENT_ID, RootId, RootId),
        EvHandler,
        Annot
    );
new(ReqId, EvHandler, Annot) ->
    make_ctx(
        true,
        make_rpc_id(?ROOT_REQ_PARENT_ID, ReqId, ReqId),
        EvHandler,
        Annot
    ).

-spec new_incoming(woody_t:rpc_id(), woody_t:handler()) ->
    ctx().
new_incoming(RpcId = #{}, EvHandler) ->
    make_ctx(false, RpcId, EvHandler, undefined).

-spec next(ctx()) -> ctx().
next(Context = #{root_rpc := true, rpc_id := RpcId}) ->
    Context#{child_rpc_id => RpcId};
next(Context = #{root_rpc := false, seq := 0,
    rpc_id := #{span_id := SpanId, trace_id := TraceId}}
) ->
    NextSeq = 1,
    Context#{
        seq => NextSeq,
        child_rpc_id => make_rpc_id(SpanId, TraceId, new_id(genlib:to_binary(NextSeq)))
    };
next(Context = #{root_rpc := false, seq := Seq,
    child_rpc_id := #{parent_id := ParentId, trace_id := TraceId}}
) ->
    NextSeq = Seq + 1,
    Context#{
        seq => NextSeq,
        child_rpc_id => make_rpc_id(ParentId, TraceId, new_id(genlib:to_binary(NextSeq)))
    }.


-spec annotate(ctx(), annotation()) ->
    ctx().
annotate(Context, Annot) ->
    Context#{annotation => append_annotation(annotation(Context), Annot)}.

-spec annotation(ctx()) ->
    annotation().
annotation(Context) ->
    case maps:get(annotation, Context, undefined) of
        undefined ->
            #{};
        Annot ->
            Annot
    end.

-spec annotation(annot_name(), ctx()) ->
    binary() | undefined.
annotation(AnnotName, Context) ->
    maps:get(AnnotName, maps:get(annotation, Context), undefined).


-spec get_rpc_id(ctx()) ->
    woody_t:rpc_id() | no_return().
get_rpc_id(Context) ->
    do_get_rpc_id(self, Context).

-spec get_child_rpc_id(ctx()) ->
    woody_t:rpc_id() | no_return().
get_child_rpc_id(Context) ->
    do_get_rpc_id(child, Context).


-spec get_rpc_id(woody_t:dapper_id(), ctx()) ->
  woody_t:req_id() | undefined | no_return().
get_rpc_id(Key, Context) ->
    do_get_rpc_id(self, Key, Context).

-spec get_child_rpc_id(woody_t:dapper_id(), ctx()) ->
  woody_t:req_id() | undefined | no_return().
get_child_rpc_id(Key, Context) ->
    do_get_rpc_id(child, Key, Context).


-spec set_ev_handler(woody_t:handler(), woody_context:ctx()) ->
    woody_context:ctx().
set_ev_handler(EvHandler, Context) ->
    Context#{event_handler := EvHandler}.

-spec get_ev_handler(woody_context:ctx()) ->
    woody_t:handler().
get_ev_handler(#{event_handler := EvHandler}) ->
    EvHandler.


-spec make_rpc_id(woody_t:parent_id(), woody_t:trace_id(), woody_t:span_id()) ->
    woody_t:rpc_id().
make_rpc_id(ParentId, TraceId, SpanId) ->
    #{
        parent_id => ParentId,
        trace_id  => TraceId,
        span_id   => SpanId
     }.

-spec new_id(binary()) ->
    woody_t:req_id().
new_id(Suffix) when is_binary(Suffix) ->
    IdInt = unique_int(),
    IdBin = genlib:to_binary(IdInt),
    <<IdBin/binary, $:, Suffix/binary>>.

-spec unique_int() ->
    pos_integer().
unique_int() ->
    <<Id:64>> = snowflake:new(?MODULE),
    Id.

%%
%% Internal functions
%%
-type is_root() :: boolean().

-spec make_ctx(is_root(), woody_t:rpc_id(), woody_t:handler(), annotation() | undefined) ->
    ctx() | no_return().
make_ctx(true, #{parent_id := ParentId}, _, _) when ParentId =/= ?ROOT_REQ_PARENT_ID ->
    error({badarg, root_has_parent});
make_ctx(false, #{parent_id := undefined}, _ , _) ->
    error({badarg, orphan_child});
make_ctx(IsRoot, RpcId, EvHandler, Annot) ->
    init_annotation(#{
        root_rpc      => IsRoot,
        seq           => 0,
        rpc_id        => RpcId,
        event_handler => EvHandler
    }, Annot).

init_annotation(Context, undefined) ->
    Context;
init_annotation(Context, Annot) ->
    Context#{annotation => Annot}.

-spec do_get_rpc_id(self | child, ctx()) ->
    woody_t:rpc_id() | no_return().
do_get_rpc_id(self, #{rpc_id := RpcId}) ->
    RpcId;
do_get_rpc_id(child, #{child_rpc_id := RpcId}) ->
    RpcId;
do_get_rpc_id(_, _) ->
    error(badarg).

-spec do_get_rpc_id(self | child, woody_t:dapper_id(), ctx()) ->
  woody_t:req_id() | undefined | no_return().
do_get_rpc_id(Type, Key, Context) ->
    maps:get(Key, do_get_rpc_id(Type, Context), undefined).

-spec append_annotation(annotation(), map()) ->
    annotation() | no_return().
append_annotation(AnnotBase, AnnotNew) ->
    Annot = maps:merge(AnnotNew, AnnotBase),
    SizeSum = maps:size(AnnotBase) + maps:size(AnnotNew),
    case maps:size(Annot) of
        SizeSum ->
            Annot;
        _ ->
            error({badarg, annotation_duplicates})
    end.
